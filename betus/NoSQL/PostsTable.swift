//
//  PostsTable.swift
//  MySampleApp
//
//
// Copyright 2017 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-swift v0.19
//

import Foundation
import UIKit
import AWSDynamoDB
import AWSAuthCore

class PostsTable: NSObject, Table {
    
    var tableName: String
    var partitionKeyName: String
    var partitionKeyType: String
    var sortKeyName: String?
    var sortKeyType: String?
    var model: AWSDynamoDBObjectModel
    var indexes: [Index]
    var orderedAttributeKeys: [String] {
        return produceOrderedAttributeKeys(model)
    }
    var tableDisplayName: String {

        return "posts"
    }
    
    override init() {

        model = Posts()
     
        tableName = model.classForCoder.dynamoDBTableName()
        partitionKeyName = model.classForCoder.hashKeyAttribute()
        partitionKeyType = "String"
      
        indexes = [
        ]
        if let sortKeyNamePossible = model.classForCoder.rangeKeyAttribute?() {
            sortKeyName = sortKeyNamePossible
          
        }
        
        super.init()
    }
    
    /**
     * Converts the attribute name from data object format to table format.
     *
     * - parameter dataObjectAttributeName: data object attribute name
     * - returns: table attribute name
     */

    func tableAttributeName(_ dataObjectAttributeName: String) -> String {
        return Posts.jsonKeyPathsByPropertyKey()[dataObjectAttributeName] as! String
    }
    
    func getItemDescription() -> String {
        let hashKeyValue = "demo-postId-500000"
        return "Find Item with postId = \(hashKeyValue)."
    }
    
    func getItemWithCompletionHandler(_ completionHandler: @escaping (_ response: AWSDynamoDBObjectModel?, _ error: NSError?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.default()
        objectMapper.load(Posts.self, hashKey: "demo-postId-500000", rangeKey: nil) { (response: AWSDynamoDBObjectModel?, error: Error?) in
            DispatchQueue.main.async(execute: {
                completionHandler(response, error as NSError?)
            })
        }
    }
    
    func scanDescription() -> String {
        return "Show all items in the table."
    }
    
    func scanWithCompletionHandler(_ completionHandler: @escaping (_ response: AWSDynamoDBPaginatedOutput?, _ error: NSError?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.default()
        let scanExpression = AWSDynamoDBScanExpression()
        scanExpression.limit = 5

        objectMapper.scan(Posts.self, expression: scanExpression) { (response: AWSDynamoDBPaginatedOutput?, error: Error?) in
            DispatchQueue.main.async(execute: {
                completionHandler(response, error as NSError?)
            })
        }
    }
    
    func scanWithFilterDescription() -> String {
        let scanFilterValue = "demo-dateTime-500000"
        return "Find all items with dateTime < \(scanFilterValue)."
    }
    
    func scanWithFilterWithCompletionHandler(_ completionHandler: @escaping (_ response: AWSDynamoDBPaginatedOutput?, _ error: NSError?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.default()
        let scanExpression = AWSDynamoDBScanExpression()
        
        scanExpression.filterExpression = "#dateTime < :dateTime"
        scanExpression.expressionAttributeNames = ["#dateTime": "dateTime" ,]
        scanExpression.expressionAttributeValues = [":dateTime": "demo-dateTime-500000" ,]

        objectMapper.scan(Posts.self, expression: scanExpression) { (response: AWSDynamoDBPaginatedOutput?, error: Error?) in
            DispatchQueue.main.async(execute: {
                completionHandler(response, error as? NSError)
            })
        }
    }
    
    func insertSampleDataWithCompletionHandler(_ completionHandler: @escaping (_ errors: [NSError]?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.default()
        var errors: [NSError] = []
        let group: DispatchGroup = DispatchGroup()
        let numberOfObjects = 20
        

        let itemForGet: Posts! = Posts()
        
        itemForGet._postId = "demo-postId-500000"
        itemForGet._dateTime = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("dateTime")
        itemForGet._imageurl = NoSQLSampleDataGenerator.randomSampleMap()
        itemForGet._postType = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("postType")
        itemForGet._taggedusers = NoSQLSampleDataGenerator.randomSampleStringArray()
        itemForGet._text = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("text")
        itemForGet._userId = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("userId")
        itemForGet._videourl = NoSQLSampleDataGenerator.randomSampleMap()
        
        
        group.enter()
        

        objectMapper.save(itemForGet, completionHandler: {(error: Error?) -> Void in
            if let error = error as? NSError {
                DispatchQueue.main.async(execute: {
                    errors.append(error)
                })
            }
            group.leave()
        })
        
        for _ in 1..<numberOfObjects {

            let item: Posts = Posts()
            item._postId = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("postId")
            item._dateTime = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("dateTime")
            item._imageurl = NoSQLSampleDataGenerator.randomSampleMap()
            item._postType = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("postType")
            item._taggedusers = NoSQLSampleDataGenerator.randomSampleStringArray()
            item._text = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("text")
            item._userId = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("userId")
            item._videourl = NoSQLSampleDataGenerator.randomSampleMap()
            
            group.enter()
            
            objectMapper.save(item, completionHandler: {(error: Error?) -> Void in
                if error != nil {
                    DispatchQueue.main.async(execute: {
                        errors.append(error! as NSError)
                    })
                }
                group.leave()
            })
        }
        
        group.notify(queue: DispatchQueue.main, execute: {
            if errors.count > 0 {
                completionHandler(errors)
            }
            else {
                completionHandler(nil)
            }
        })
    }
    
    func removeSampleDataWithCompletionHandler(_ completionHandler: @escaping ([NSError]?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.default()
        let scanExpression = AWSDynamoDBScanExpression()
        scanExpression.filterExpression = "begins_with(#postId, :postId)"
        scanExpression.expressionAttributeNames = ["#postId": "postId"]
        scanExpression.expressionAttributeValues = [":postId": "demo-"]

        objectMapper.scan(Posts.self, expression: scanExpression) { (response: AWSDynamoDBPaginatedOutput?, error: Error?) in
            if let error = error as? NSError {
                DispatchQueue.main.async(execute: {
                    completionHandler([error]);
                    })
            } else {
                var errors: [NSError] = []
                let group: DispatchGroup = DispatchGroup()
                for item in response!.items {
                    group.enter()
                    objectMapper.remove(item, completionHandler: {(error: Error?) in
                        if let error = error as? NSError {
                            DispatchQueue.main.async(execute: {
                                errors.append(error)
                            })
                        }
                        group.leave()
                    })
                }
                group.notify(queue: DispatchQueue.main, execute: {
                    if errors.count > 0 {
                        completionHandler(errors)
                    }
                    else {
                        completionHandler(nil)
                    }
                })
            }
        }
    }
    
    func updateItem(_ item: AWSDynamoDBObjectModel, completionHandler: @escaping (_ error: NSError?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.default()
        

        let itemToUpdate: Posts = item as! Posts
        
        itemToUpdate._dateTime = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("dateTime")
        itemToUpdate._imageurl = NoSQLSampleDataGenerator.randomSampleMap()
        itemToUpdate._postType = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("postType")
        itemToUpdate._taggedusers = NoSQLSampleDataGenerator.randomSampleStringArray()
        itemToUpdate._text = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("text")
        itemToUpdate._userId = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("userId")
        itemToUpdate._videourl = NoSQLSampleDataGenerator.randomSampleMap()
        
        objectMapper.save(itemToUpdate, completionHandler: {(error: Error?) in
            DispatchQueue.main.async(execute: {
                completionHandler(error as? NSError)
            })
        })
    }
    
    func removeItem(_ item: AWSDynamoDBObjectModel, completionHandler: @escaping (_ error: NSError?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.default()
        
        objectMapper.remove(item, completionHandler: {(error: Error?) in
            DispatchQueue.main.async(execute: {
                completionHandler(error as? NSError)
            })
        })
    }
}
